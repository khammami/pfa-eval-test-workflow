name: Android Build Debug and Upload

on:
  push:
    branches:
      - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      ANDROID_APP_PATH: "sample/application"

    steps:
      - uses: actions/checkout@v4

      # Check if the application folder contains an Android project
      - name: Check for Android project
        run: |
          if [ -f "${{env.ANDROID_APP_PATH}}/build.gradle" ] || [ -f "${{env.ANDROID_APP_PATH}}/build.gradle.kts" ]; then
            echo "Android project found"
            if [ -n "$(find ${{env.ANDROID_APP_PATH}}/app/src/main/java -name "*.kt" -type f)" ]; then
              echo "Module app is written in Kotlin"
              exit 1
            else
              echo "Module app is written in Java"
            fi
          else
            echo "No Android project found"
            exit 1
          fi

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-eval-test

      - name: Grant gradlew permission
        run: chmod +x ${{env.ANDROID_APP_PATH}}/gradlew

      # Build the debug apk
      - name: Build debug apk
        run: ./${{env.ANDROID_APP_PATH}}/gradlew assembleDebug -p ${{env.ANDROID_APP_PATH}}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          avd-name: "test"
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Check GithubA env
        run: echo "$GITHUB_CONTEXT"

      - name: tests 1
        run: |
          echo $ANDROID_HOME
          ls -a $ANDROID_HOME
          echo "########"
          echo $ANDROID_HOME/cmdline-tools
          ls -a $ANDROID_HOME/cmdline-tools
          echo "########"
          echo $ANDROID_HOME/cmdline-tools/latest
          ls -a $ANDROID_HOME/cmdline-tools/latest
          echo "########"
          find "$ANDROID_HOME" -path "*emulator*" -o -name "*emulator*" -print

      - name: tests 2
        run: |
          bash .github/scripts/setup_emulators.sh

      - name: tests 3
        run: |
          echo "########"
          find "$ANDROID_HOME" -name "*emulator*" -print

      # - name: Start Android Emulator
      #   timeout-minutes: 1
      #   continue-on-error: true
      #   run: |
      #     echo "Starting emulator"
      #     nohup $ANDROID_HOME/cmdline-tools/latest/emulator/emulator -avd "test" -no-audio -no-snapshot -no-window &
      #     $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
      #     $ANDROID_HOME/platform-tools/adb devices
      #     echo "Emulator started"

      # - name: run tests
      #   run: ./${{env.ANDROID_APP_PATH}}/gradlew connectedCheck -p ${{env.ANDROID_APP_PATH}}
      
      # - name: run tests
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 29
      #     force-avd-creation: false
      #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: true
      #     script: ./${{env.ANDROID_APP_PATH}}/gradlew connectedCheck -p ${{env.ANDROID_APP_PATH}}

      # # Upload the debug apk to GitHub
      # - name: Upload debug apk
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: android-debug
      #     path: "${{env.ANDROID_APP_PATH}}/app/build/outputs/apk/debug/*"
